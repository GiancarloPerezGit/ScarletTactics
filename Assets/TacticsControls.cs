//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/TacticsControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TacticsControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TacticsControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TacticsControls"",
    ""maps"": [
        {
            ""name"": ""RegularMenu"",
            ""id"": ""742b3ebf-d585-421a-966a-3ce992fac8e3"",
            ""actions"": [
                {
                    ""name"": ""ChangeSelection"",
                    ""type"": ""Button"",
                    ""id"": ""29e301ff-ec7e-4f6d-a5cd-f89d7f263585"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""65730931-eba0-43ac-8237-b0b531fb9e50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""5aade153-c54c-4e82-8e4f-0ff03fbd6ff2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0fc65c16-814f-4da4-a1fb-e8b180f115d0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSelection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d643f69f-6c56-49e4-8176-0aad0165f689"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""803dbcb0-9035-43b0-9f9f-4747e86ddee9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""079b4ef1-8167-4326-9381-714456e06bf0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5263e844-0afe-4091-8213-8b82a880718f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TileSelection"",
            ""id"": ""53306723-0aa6-43e1-b7ad-b4da38fc1b97"",
            ""actions"": [
                {
                    ""name"": ""MoveCursor"",
                    ""type"": ""Value"",
                    ""id"": ""2af27e21-1985-4398-9f8b-3f19c57cb97b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeHeight"",
                    ""type"": ""Button"",
                    ""id"": ""9db10d5b-3fb2-4ac5-a42e-a527e026ab9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""7522f374-d0b1-4cc0-9084-9621b7ac10d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""5414c2cf-400b-4f7d-a58c-e6b66d5ff1c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""aa66e05d-4e4a-4b4e-b87a-a17cc6abf6e6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dc65efee-3893-49dc-9d7f-7bd4fe07a138"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7aefbb1b-d6fe-4357-825d-372a0b886a9f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03793b20-d214-4690-b7c5-3b43a172f346"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b5e7ee93-0743-4804-861b-2a78d2189b95"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7b625f1a-c76c-460b-825d-c902d8adbe1d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeHeight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d666586b-2df3-49ce-a961-5688d8f9b8e4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeHeight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4b22bcba-0f6f-4eb9-86f2-daf16edb215b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeHeight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""55e53e42-ee4a-4d52-b1ef-34e5f019659f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cda204c-8d5f-4249-a4cb-c8510b102d7d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RegularMenu
        m_RegularMenu = asset.FindActionMap("RegularMenu", throwIfNotFound: true);
        m_RegularMenu_ChangeSelection = m_RegularMenu.FindAction("ChangeSelection", throwIfNotFound: true);
        m_RegularMenu_Select = m_RegularMenu.FindAction("Select", throwIfNotFound: true);
        m_RegularMenu_Cancel = m_RegularMenu.FindAction("Cancel", throwIfNotFound: true);
        // TileSelection
        m_TileSelection = asset.FindActionMap("TileSelection", throwIfNotFound: true);
        m_TileSelection_MoveCursor = m_TileSelection.FindAction("MoveCursor", throwIfNotFound: true);
        m_TileSelection_ChangeHeight = m_TileSelection.FindAction("ChangeHeight", throwIfNotFound: true);
        m_TileSelection_Select = m_TileSelection.FindAction("Select", throwIfNotFound: true);
        m_TileSelection_Cancel = m_TileSelection.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RegularMenu
    private readonly InputActionMap m_RegularMenu;
    private IRegularMenuActions m_RegularMenuActionsCallbackInterface;
    private readonly InputAction m_RegularMenu_ChangeSelection;
    private readonly InputAction m_RegularMenu_Select;
    private readonly InputAction m_RegularMenu_Cancel;
    public struct RegularMenuActions
    {
        private @TacticsControls m_Wrapper;
        public RegularMenuActions(@TacticsControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeSelection => m_Wrapper.m_RegularMenu_ChangeSelection;
        public InputAction @Select => m_Wrapper.m_RegularMenu_Select;
        public InputAction @Cancel => m_Wrapper.m_RegularMenu_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_RegularMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RegularMenuActions set) { return set.Get(); }
        public void SetCallbacks(IRegularMenuActions instance)
        {
            if (m_Wrapper.m_RegularMenuActionsCallbackInterface != null)
            {
                @ChangeSelection.started -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnChangeSelection;
                @ChangeSelection.performed -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnChangeSelection;
                @ChangeSelection.canceled -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnChangeSelection;
                @Select.started -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnSelect;
                @Cancel.started -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_RegularMenuActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_RegularMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeSelection.started += instance.OnChangeSelection;
                @ChangeSelection.performed += instance.OnChangeSelection;
                @ChangeSelection.canceled += instance.OnChangeSelection;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public RegularMenuActions @RegularMenu => new RegularMenuActions(this);

    // TileSelection
    private readonly InputActionMap m_TileSelection;
    private ITileSelectionActions m_TileSelectionActionsCallbackInterface;
    private readonly InputAction m_TileSelection_MoveCursor;
    private readonly InputAction m_TileSelection_ChangeHeight;
    private readonly InputAction m_TileSelection_Select;
    private readonly InputAction m_TileSelection_Cancel;
    public struct TileSelectionActions
    {
        private @TacticsControls m_Wrapper;
        public TileSelectionActions(@TacticsControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCursor => m_Wrapper.m_TileSelection_MoveCursor;
        public InputAction @ChangeHeight => m_Wrapper.m_TileSelection_ChangeHeight;
        public InputAction @Select => m_Wrapper.m_TileSelection_Select;
        public InputAction @Cancel => m_Wrapper.m_TileSelection_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_TileSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TileSelectionActions set) { return set.Get(); }
        public void SetCallbacks(ITileSelectionActions instance)
        {
            if (m_Wrapper.m_TileSelectionActionsCallbackInterface != null)
            {
                @MoveCursor.started -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnMoveCursor;
                @MoveCursor.performed -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnMoveCursor;
                @MoveCursor.canceled -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnMoveCursor;
                @ChangeHeight.started -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnChangeHeight;
                @ChangeHeight.performed -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnChangeHeight;
                @ChangeHeight.canceled -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnChangeHeight;
                @Select.started -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnSelect;
                @Cancel.started -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_TileSelectionActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_TileSelectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveCursor.started += instance.OnMoveCursor;
                @MoveCursor.performed += instance.OnMoveCursor;
                @MoveCursor.canceled += instance.OnMoveCursor;
                @ChangeHeight.started += instance.OnChangeHeight;
                @ChangeHeight.performed += instance.OnChangeHeight;
                @ChangeHeight.canceled += instance.OnChangeHeight;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public TileSelectionActions @TileSelection => new TileSelectionActions(this);
    public interface IRegularMenuActions
    {
        void OnChangeSelection(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface ITileSelectionActions
    {
        void OnMoveCursor(InputAction.CallbackContext context);
        void OnChangeHeight(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
