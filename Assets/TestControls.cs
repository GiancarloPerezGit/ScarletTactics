//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/TestControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestControls"",
    ""maps"": [
        {
            ""name"": ""Debugging"",
            ""id"": ""31998a76-dda6-47ec-a24a-95c00d00c44b"",
            ""actions"": [
                {
                    ""name"": ""Pathfinding"",
                    ""type"": ""Button"",
                    ""id"": ""2b3cf6b8-8ed3-4a64-9bc6-ab61ca1f254e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Endturn"",
                    ""type"": ""Button"",
                    ""id"": ""46b41537-42ec-48c0-829f-2bfb53b3d551"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a10cd1b-79b6-4ff5-a161-48962ad5d47f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pathfinding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed57b5e9-c42b-40b5-90ef-615ed7b11aae"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Endturn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debugging
        m_Debugging = asset.FindActionMap("Debugging", throwIfNotFound: true);
        m_Debugging_Pathfinding = m_Debugging.FindAction("Pathfinding", throwIfNotFound: true);
        m_Debugging_Endturn = m_Debugging.FindAction("Endturn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debugging
    private readonly InputActionMap m_Debugging;
    private IDebuggingActions m_DebuggingActionsCallbackInterface;
    private readonly InputAction m_Debugging_Pathfinding;
    private readonly InputAction m_Debugging_Endturn;
    public struct DebuggingActions
    {
        private @TestControls m_Wrapper;
        public DebuggingActions(@TestControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pathfinding => m_Wrapper.m_Debugging_Pathfinding;
        public InputAction @Endturn => m_Wrapper.m_Debugging_Endturn;
        public InputActionMap Get() { return m_Wrapper.m_Debugging; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebuggingActions set) { return set.Get(); }
        public void SetCallbacks(IDebuggingActions instance)
        {
            if (m_Wrapper.m_DebuggingActionsCallbackInterface != null)
            {
                @Pathfinding.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnPathfinding;
                @Pathfinding.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnPathfinding;
                @Pathfinding.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnPathfinding;
                @Endturn.started -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnEndturn;
                @Endturn.performed -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnEndturn;
                @Endturn.canceled -= m_Wrapper.m_DebuggingActionsCallbackInterface.OnEndturn;
            }
            m_Wrapper.m_DebuggingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pathfinding.started += instance.OnPathfinding;
                @Pathfinding.performed += instance.OnPathfinding;
                @Pathfinding.canceled += instance.OnPathfinding;
                @Endturn.started += instance.OnEndturn;
                @Endturn.performed += instance.OnEndturn;
                @Endturn.canceled += instance.OnEndturn;
            }
        }
    }
    public DebuggingActions @Debugging => new DebuggingActions(this);
    public interface IDebuggingActions
    {
        void OnPathfinding(InputAction.CallbackContext context);
        void OnEndturn(InputAction.CallbackContext context);
    }
}
